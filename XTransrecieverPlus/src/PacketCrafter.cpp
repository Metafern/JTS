#include "PacketCrafter.h"
using namespace std;
using namespace pcpp;
using namespace util;
using namespace cfg;

uint64_t crft::PiaPacket::nonce = 0;

crft::PiaPacket::PiaPacket(Parser* parserIn) {
	parser = parserIn;
	header.nonce = &nonce;
	header.version = 0x84;

	message.field_flags = 0x7f;
	message.msg_flag = 0x09;
}
crft::PiaPacket::PiaPacket() {
	header.nonce = &nonce;
	header.version = 0x84;
}

Packet crft::PiaPacket::craftPacket(vector<uint8_t> data, int srcPort, int dstPort, int dstIP) {
	
	Packet out;

	EthLayer eth(MacAddress("7c:bb:8a:dd:55:bb"), MacAddress("ff:ff:ff:ff:ff:ff"));
	out.addLayer(&eth);
	IPv4Layer ip;
	ip.getIPv4Header()->ipSrc = IPv4Address(string(interfaceIPAddr)).toInt();
	ip.getIPv4Header()->ipDst = htonl(dstIP);
	ip.getIPv4Header()->ipId = htons(2000);
	ip.getIPv4Header()->timeToLive = 64;
	out.addLayer(&ip);

	UdpLayer udp(srcPort, dstPort);
	out.addLayer(&udp);

	PayloadLayer payload(data.data(), data.size(), true);
	out.addLayer(&payload);
	out.computeCalculateFields();
	return out;
}

void crft::Lan::craftBrowseReq(Packet& in) {

	//lazy approach
	vector<uint8_t> data;
	HexToVector("000000023affffffff000400040101ffffffffce0997216b848f1fb8e6a0e332dd59444fb86ab43cdc82f0076068d0107ee3a6169c973e2ad9991233df6ccacf19c6e7019377ffdeb4dae62116fc2ac74a828362949d94372d5dd1ad3875db9a613037555f05032a82c6ee1a83aa33eb7a8ccd559f86ac1ebfa1a2a1ea20bb68aa80e88775b7ba15dc09700a2902a3be5c226c51258ef2ecd49df1c0b5f6ae6ed6bae47cdd6e5604a51ffe0cb6b18163ec54d8dedaeba2dcf365ccb80c15c87861c30e43768d3289049c8df0d0d52af995749aeb23bb2e14f2ae09db4eae59627786f9e1812ae0e4182975e7152b301df91e1ad88324b103919e8b905296d869dcac01ee5bc89e7d21070d3f1807c1331982feea20672541109de9b14e31c0503913098e6fb70c92f7da1c73aedb44ff44e9e5e", &data);
	in = craftPacket(data, 30000, 30000);
}

void crft::Lan::craftHostReq(Packet& in) {

	vector<uint8_t> data;
	data.push_back(Lan::GET_HOST_REQ); //Packet ID
	for (int i = 0; i < 11; i++)
		data.push_back(0); //padding
	data.insert(data.end(), parser->sessionID.begin(), parser->sessionID.end());
	
	message.appendHeader(&data);

	vector<uint8_t> out;

	if (parser->EncryptPia(data, &out, header)) {
		in = craftPacket(out, 49155, 49152);
	}
}

void crft::Lan::craftBrowseRep(Packet& in) {
	vector<uint8_t> data;
	HexToVector("010000051100000000003dc00000000000000000000000000000000000000000000000000000010000000407050000bd20500d000002d46119ec17c85000a570046a39a699bc2442a92fe73400108babd9278ec8bbced3ef99039c01306e43006f006f006c000000046a39a699bc2442a92fe7340010081102ac310000090400000042ac11030e4c64b183014d390002920a4c47b789470b292b44623b834790ac2d3e4b47b789470b292b44623b834790ac2d3e4a47b789470b292b44623b834790ac2d3e02ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db0038000801000032000000000000000e0025000200000039040200580012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000168010a00003d000000000000000000000000c0000a00003d0000c000093eec5f003dc0000101536f6d656f6e650000000000000000000000000000000000000000000000000000000000000000000a00003d0000ca0dc5be0f8c826f9b9d119b66e9c3834e0997216b848f1fb8e6a0e332dd59444", &data);
	


}